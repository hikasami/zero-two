#–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞ –∫—É–¥–∞ –≤—Å—ë –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è
import disnake
from disnake.ext import commands
from disnake import Embed
import asyncio
import random
import os
import sqlite3
from datetime import datetime, timedelta
import keep_alive


bot = commands.Bot(command_prefix='/', intents=disnake.Intents.all(), reload=True)

conn = sqlite3.connect('bans.db')
c = conn.cursor()


c.execute('''CREATE TABLE IF NOT EXISTS bans
             (user_id INTEGER PRIMARY KEY, username TEXT, reason TEXT)''')


c.execute('''CREATE TABLE IF NOT EXISTS economy
             (user_id INTEGER PRIMARY KEY, username TEXT, balance INTEGER, last_daily INTEGER)''')

conn.commit()



@bot.event
async def on_ready():
    await bot.change_presence(status=disnake.Status.idle, activity=disnake.Activity(type=disnake.ActivityType.listening, name="Yandex Music"))



@bot.event
async def on_application_command_error(ctx, error):
    if isinstance(error, disnake.errors.MissingPermissions):
        await ctx.response.send_message("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", ephemeral=True)
    else:
        await ctx.response.send_message("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", ephemeral=True)
    print(f"Error: {error}")


@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandNotFound ):
        await ctx.send(embed = disnake.Embed(description = f'** {ctx.author.name}, –î–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç, –Ω–æ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç.**', color=0x9b59b6))



@bot.event
async def on_member_join(member):
    emb = disnake.Embed(title="–ü—Ä–∏–≤–µ—Ç –∫–∏—Å—É–Ω—åüòä –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä...", color=0x9b59b6)
    emb.add_field(name="–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ãüòä", value="–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–π –Ω–∞–ø–∏—à–∏ - /help")
    await member.send(embed=emb)

    


@bot.slash_command(name="kick", description="–í—ã–≥–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞.")
@commands.has_permissions(kick_members=True)
async def kick_user(ctx: disnake.ApplicationCommandInteraction, user: disnake.Member, reason: str = None):
    await user.kick(reason=reason)
    embed=disnake.Embed(color=0x9b59b6)
    embed.add_field(name="Kick", value=f"{ctx.author.mention} –∫–∏–∫–Ω—É–ª–∞ {user.mention} –∏–∑ {ctx.guild} —Å–µ—Ä–≤–µ—Ä–∞")
    await ctx.send(embed=embed)



@bot.slash_command(name='clear', description='–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç')
async def clear(ctx: disnake.ApplicationCommandInteraction, amount: int):
    if not ctx.author.guild_permissions.manage_messages:
        await ctx.send('–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∫–∏—Å—É–Ω—å üò≥')
        return
    if amount > 1000:
        await ctx.send('–ö–∏—Å—É–Ω—è—è –±–æ–ª—å—à–µ 1000 —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ–ª—å–∑—è')
        return
    deleted = await ctx.channel.purge(limit=amount)
    
    embed=disnake.Embed(color=0x9b59b6)
    embed.add_field(name="–û—á–∏—Å—Ç–∏–ª–∞ —á–∞—Ç", value=f"–£–¥–∞–ª–∏–ª–∞ {len(deleted)} —Å–æ–æ–±—â–µ–Ω–∏–π üòä", inline=False)
    await ctx.send(embed=embed)



@bot.slash_command(name="ban", description="–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
@commands.has_permissions(ban_members=True)
async def ban_user(ctx: disnake.ApplicationCommandInteraction, user: disnake.Member, reason: str = None):
    c.execute("SELECT user_id FROM bans WHERE user_id=?", (user.id,))
    banned_user = c.fetchone()

    if banned_user:
        embed = disnake.Embed(title="API Status", description=f"{user.mention} –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω.", color=0x9b59b6)
    else:
        await user.ban(reason=reason)
        c.execute("INSERT INTO bans (user_id, username, reason) VALUES (?, ?, ?)", (user.id, user.name, reason))
        conn.commit()
        embed = disnake.Embed(title="API Status", description=f"{user.mention} –Ø –∑–∞–±–∞–Ω–∏–ª–∞ —ç—Ç—É —Ö–∞–º–∫—É.üò§", color=0x9b59b6)

    await ctx.send(embed=embed)



@bot.slash_command(name="message_bot", description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –ü–æ–ª–∏–Ω—ã.")
@commands.has_permissions(administrator=True)
async def echo(ctx: disnake.ApplicationCommandInteraction, *, message: str):
    message = message.replace("-", "\n")
    embed=disnake.Embed(color=0x9b59b6)
    embed.add_field(name="", value=message, inline=False)
    await ctx.response.send_message(message)
    await ctx.send(embed=embed)






@bot.slash_command(name="daily", description="–ü–æ–ª—É—á–∏—Ç—å Poli-coins.")
async def daily(ctx: disnake.ApplicationCommandInteraction):
    user_id = ctx.author.id
    username = ctx.author.name

    c.execute('SELECT balance, last_daily FROM economy WHERE user_id = ?', (user_id,))
    row = c.fetchone()

    if not row:
        c.execute('INSERT INTO economy (user_id, username, balance, last_daily) VALUES (?, ?, 0, 0)', (user_id, username))
        conn.commit()
        await ctx.send(f"{ctx.author.mention} –í–∞—à–∞ –∫–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ—é –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É.")
    else:
        balance, last_daily = row
        last_daily_date = datetime.fromtimestamp(last_daily)

        if last_daily_date.date() == datetime.utcnow().date():
            await ctx.send(f"{ctx.author.mention} –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ Poli-coins —Å–µ–≥–æ–¥–Ω—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞.")
        else:
            new_balance = balance + random.randint(50, 150)
            c.execute('UPDATE economy SET balance = ?, last_daily = ? WHERE user_id = ?', (new_balance, int(datetime.utcnow().timestamp()), user_id))
            conn.commit()
            embed=disnake.Embed(color=0x9b59b6)
            embed.add_field(name="Poli-coins", value="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å", inline=False)
            embed.add_field(name="–¢—ã –ø–æ–ª—É—á–∏–ª", value=f"{new_balance - balance} Poli-coins", inline=True)
            await ctx.send(embed=embed)





@bot.slash_command(name="balance", description="–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å.")
async def balance(ctx: disnake.ApplicationCommandInteraction):
    user_id = ctx.author.id
    c.execute('SELECT balance FROM economy WHERE user_id = ?', (user_id,))
    row = c.fetchone()

    if not row:
        c.execute('INSERT INTO economy (user_id, username, balance, last_daily) VALUES (?, ?, 0, 0)', (user_id, ctx.author.name))
        conn.commit()
        embed = disnake.Embed(color=0x9b59b6)
        embed.add_field(name="–í–∞—à –±–∞–ª–∞–Ω—Å", value="–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É: 0", inline=True)
        await ctx.send(embed=embed)
    else:
        balance = row[0]
        embed = disnake.Embed(color=0x9b59b6)
        embed.add_field(name="–í–∞—à –±–∞–ª–∞–Ω—Å", value=f"–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É: {balance}", inline=True)
        await ctx.send(embed=embed)






@bot.slash_command(name="game", description="–ò–≥—Ä–∞—Ç—å –≤ '–û—Ä–µ–ª –∏ —Ä–µ—à–∫–∞'.")
async def heads_or_tails(ctx: disnake.ApplicationCommandInteraction, bet: int, guess: str):
    user_id = ctx.author.id

    c.execute('SELECT balance FROM economy WHERE user_id = ?', (user_id,))
    row = c.fetchone()
    if not row:
        await ctx.send("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç–∫–æ–Ω–æ–º–∏–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /daily –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    balance = row[0]
    if balance < bet:
        await ctx.send("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Poli-coins –¥–ª—è –∏–≥—Ä—ã.")
        return

    options = ["heads", "tails"]
    result = random.choice(options)

    if result == guess.lower():
        winnings = bet * 2
        c.execute('UPDATE economy SET balance = balance + ? WHERE user_id = ?', (winnings, user_id))
        conn.commit()
        message = f"{ctx.author.mention}, –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings} Poli-coins! –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}."
        color = 0x9b59b6  
    else:
        c.execute('UPDATE economy SET balance = balance - ? WHERE user_id = ?', (bet, user_id))
        conn.commit()
        message = f"{ctx.author.mention}, –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet} Poli-coins! –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}."
        color = 0x9b59b6 
    
    embed = disnake.Embed(color=color)
    embed.add_field(name="–û—Ä—ë–ª –∏ —Ä–µ—à–∫–∞", value=message, inline=False)
    await ctx.send(embed=embed)




@bot.slash_command(name='help', description='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã')
async def help(ctx):
    embed = disnake.Embed(
        title="–í—Å–µ –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã –ö–∏—Å—É–Ω—å üòä",
        color=0x9b59b6
    )
    
    commands_list = ["/kick", "/clear", "/ban", "/join", "/leave", "/help","/echo", "/daily", "/balance", "/game"]
    descriptions_for_commands = [
        "–í—ã–≥–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞",
        "–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç",
        "–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
        "–ó–∞–π—Ç–∏ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª",
        "–í—ã–π—Ç–∏ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª",
        "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã",
        "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –ü–æ–ª–∏–Ω—ã",
        "–ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ Poli-coins",
        "–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å",
        "–ò–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—ã –Ω–∞ Poli-coins"
    ]

    for command_name, description_command in zip(commands_list, descriptions_for_commands):
        embed.add_field(
            name=command_name,
            value=description_command,
            inline=False 
        )

    await ctx.send(embed=embed)




@bot.slash_command(name='join', description='–ó–∞–π—Ç–∏ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª')
async def join(ctx: disnake.ApplicationCommandInteraction):
    if not ctx.author.voice:
        await ctx.send('–¢—ã –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã')
        return
    voice_channel = ctx.author.voice.channel
    await voice_channel.connect()
    await ctx.send(f'–ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É "{voice_channel.name}".')



@bot.slash_command(name='leave', description='–í—ã–π—Ç–∏ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞')
async def leave(ctx: disnake.ApplicationCommandInteraction):
    if not ctx.guild.voice_client:
        await ctx.send('–Ø –Ω–µ –Ω–∞—Ö–æ–∂—É—Å—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ')
        return

    await ctx.guild.voice_client.disconnect()
    await ctx.send('–û—Ç–∫–ª—é—á–∏–ª–∞—Å—å –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞')


bot.event
async def on_disconnect():
   conn.close()


keep_alive.keep_alive()

bot.run(os.environ.get('TOKEN'))

